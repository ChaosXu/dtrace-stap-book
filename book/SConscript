import sys

from SCons.Errors import StopError

Import('env')

def GlobDocs(doc_dir):
    return Dir(doc_dir).glob('*.md')

doc_format = GetOption('doc_format')
if doc_format == 'html':
    doc_suffix = '.html'
elif doc_format == 'markdown':
    doc_suffix = '.md'
elif doc_format == 'latex':
    doc_suffix = '.tex'
elif doc_format == 'pdf':
    doc_suffix = '.pdf'            
else:
    raise StopError("Invalid documentation format '%s'" % doc_format)

DocGenerator = Builder(action = Action('%s tsdoc/gen-doc.py $SOURCES' % (sys.executable)),
                       src_suffix = '.md', suffix = doc_suffix)

env.Append(BUILDERS = {'DocGenerator': DocGenerator})

env.Append(ENV = {'TSDOC_FORMAT': doc_format})
env.Append(ENV = {'TSDOC_HEADER': 'Dynamic Tracing with DTrace & SystemTap'})
env.Append(ENV = {'TSDOC_AUTHOR': 'Sergey Klyaus'})
env.Append(ENV = {'TSDOC_HTML_TEMPLATE': File('../book/template.html').abspath})
if GetOption('verbose'):
    env.Append(ENV = {'TSDOC_VERBOSE': True})
if GetOption('no_sources'):
    env.Append(ENV = {'TSDOC_NO_SOURCES': True})


index = File('index.md')

if doc_format == 'html':
    cssdir, lessdir = Dir('bootstrap').Dir('css'), Dir('bootstrap').Dir('less')
    
    for lessname, cssname in [('bootstrap.less', 'bootstrap.css'),
                              ('responsive.less', 'bootstrap-responsive.css')]:
        bsless = lessdir.File(lessname)
        bscss = cssdir.File(cssname)
        
        # Implicit dependencies
        for less in lessdir.glob('*.less'):
            env.Depends(bscss, less)
            
        # Build bootstrap from less
        env.LessBuilder(bscss, bsless)
        env.Depends(index, bscss)

docs = env.DocGenerator([index] + GlobDocs('intro') + GlobDocs('tools')  
                                + GlobDocs('lang') + GlobDocs('principles')
                                + GlobDocs('kernel') + GlobDocs('app')
                                + GlobDocs('hints') + GlobDocs('lab'))
env.AlwaysBuild(docs)